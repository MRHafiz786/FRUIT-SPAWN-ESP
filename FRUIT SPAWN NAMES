local labelColor = Color3.new(1, 1, 1)  -- Color of the label text
local labelStrokeColor = Color3.new(0, 0, 0)  -- Color of the label text stroke
local labelSize = UDim2.new(0, 100, 0, 40)  -- Size of the label
local labelOffset = Vector3.new(0, 3, 0)  -- Offset position of the label above the fruit

-- Set the desired class name of the fruit
local desiredClassName = "Model"

-- Create the floating label for a fruit
local function createFloatingLabel(fruit)
    local primaryPart = fruit.PrimaryPart
    if not primaryPart then
        return
    end

    local label = Instance.new("BillboardGui")
    label.Name = "FloatingLabel"
    label.Adornee = primaryPart
    label.Size = labelSize
    label.StudsOffset = labelOffset
    label.AlwaysOnTop = true
    label.Parent = primaryPart

    local textLabel = Instance.new("TextLabel")
    textLabel.Name = "TextLabel"
    textLabel.BackgroundTransparency = 1
    textLabel.Size = UDim2.new(1, 0, 0.7, 0)
    textLabel.Position = UDim2.new(0, 0, 0.15, 0)
    textLabel.Font = Enum.Font.SourceSansBold
    textLabel.TextSize = 18
    textLabel.TextColor3 = labelColor
    textLabel.TextStrokeColor3 = labelStrokeColor
    textLabel.TextStrokeTransparency = 0
    textLabel.Parent = label

    local distanceLabel = Instance.new("TextLabel")
    distanceLabel.Name = "DistanceLabel"
    distanceLabel.BackgroundTransparency = 1
    distanceLabel.Size = UDim2.new(1, 0, 0.3, 0)
    distanceLabel.Position = UDim2.new(0, 0, 0.85, 0)
    distanceLabel.Font = Enum.Font.SourceSansBold
    distanceLabel.TextSize = 18
    distanceLabel.TextColor3 = labelColor
    distanceLabel.TextStrokeColor3 = labelStrokeColor
    distanceLabel.TextStrokeTransparency = 0
    distanceLabel.Parent = label

    local function updateLabels()
        local distance = math.floor((primaryPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude)
        local fruitName = fruit.Name
        textLabel.Text = fruitName
        distanceLabel.Text = tostring(distance) .. "m"
    end

    -- Call updateLabels initially
    updateLabels()

    -- Connect updateLabels to the Heartbeat event to continuously update the label texts
    game:GetService("RunService").Heartbeat:Connect(updateLabels)
end

-- Function to check if a part's class name matches the desired class name
local function isDesiredFruit(fruit)
    if fruit:IsA(desiredClassName) then
        return true
    end
    return false
end

-- Function to update the position of the floating labels
local function updateLabelsPosition()
    for _, fruit in ipairs(game:GetService("Workspace"):GetChildren()) do
        if fruit:IsA("Model") and isDesiredFruit(fruit) then
            local label = fruit:FindFirstChild("FloatingLabel")
            if label then
                label.Adornee = fruit.PrimaryPart
            end
        end
    end
end

-- Listen for new fruits and create floating labels for them
game:GetService("Workspace").ChildAdded:Connect(function(child)
    if child:IsA("Model") and isDesiredFruit(child) then
        createFloatingLabel(child)
    end
end)

-- Create floating labels for existing fruits in the game
for _, fruit in ipairs(game:GetService("Workspace"):GetChildren()) do
    if fruit:IsA("Model") and isDesiredFruit(fruit) then
        createFloatingLabel(fruit)
    end
end

-- Call the updateLabelsPosition function periodically to update the labels' positions
while true do
    updateLabelsPosition()
    wait(1)  -- Adjust the delay as needed
end
